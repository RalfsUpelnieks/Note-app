// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230909055838_initMigration")]
    partial class initMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Block", b =>
                {
                    b.Property<string>("blockId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("html")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.Property<string>("tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uniqueData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("blockId");

                    b.HasIndex("pageId");

                    b.ToTable("blocks");
                });

            modelBuilder.Entity("backend.Models.Event", b =>
                {
                    b.Property<string>("eventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("blockId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("eventId");

                    b.HasIndex("blockId");

                    b.ToTable("events");
                });

            modelBuilder.Entity("backend.Models.File", b =>
                {
                    b.Property<string>("blockId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("size")
                        .HasColumnType("int");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("blockId");

                    b.ToTable("files");
                });

            modelBuilder.Entity("backend.Models.Page", b =>
                {
                    b.Property<string>("pageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pageId");

                    b.HasIndex("UserId");

                    b.ToTable("pages");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("backend.Models.Block", b =>
                {
                    b.HasOne("backend.Models.Page", "Page")
                        .WithMany("Blocks")
                        .HasForeignKey("pageId");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("backend.Models.Event", b =>
                {
                    b.HasOne("backend.Models.Block", "Block")
                        .WithMany("Event")
                        .HasForeignKey("blockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("backend.Models.File", b =>
                {
                    b.HasOne("backend.Models.Block", "block")
                        .WithOne("file")
                        .HasForeignKey("backend.Models.File", "blockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("block");
                });

            modelBuilder.Entity("backend.Models.Page", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany("Pages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Block", b =>
                {
                    b.Navigation("Event");

                    b.Navigation("file")
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Page", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("Pages");
                });
#pragma warning restore 612, 618
        }
    }
}
